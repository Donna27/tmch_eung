<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd ">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<import resource="classpath*:/META-INF/DataSource.xml" />
	<import resource="classpath*:/META-INF/tmch-dao.xml" />
	<import resource="classpath*:/META-INF/tmch-service.xml" />
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/META-INF/database.properties</value>
				<value>classpath:/META-INF/hibernate.properties</value>
				<!-- <value>classpath:/META-INF/javamail.properties</value> -->
			</list>
		</property>
	</bean>
	<!-- <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>/WEB-INF/properties/database.properties</value> 
		<value>/WEB-INF/properties/hibernate.properties</value> </list> </property> 
		</bean> -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${database.driverClassName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<!-- <property name="validationQuery" value="SELECT * from user_model" 
			/> -->
	</bean>
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <annotation-driven /> -->
	<mvc:annotation-driven />
	<!--<context:annotation-config /> -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/javascript/**" location="/javascript/" />
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<context:component-scan base-package="com.mycompany.tmch.controller" />


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="schemaUpdate" value="true" /> -->
		<property name="hibernateProperties">
			<props>

				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
				<prop key="hibernate.validator.apply_to_ddl">false</prop>
				<prop key="hibernate.validator.autoregister_listeners">false</prop>
			</props>
		</property>

		<property name="packagesToScan">
			<list>
				<value>com.mycompany.tmch.model</value>
				
			</list>
		</property>
	</bean>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- Configure to plugin JSON as request and response in method handler -->
	  <bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean> 

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	 <bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>
	 
     <!-- <bean name="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" /> -->
</beans>